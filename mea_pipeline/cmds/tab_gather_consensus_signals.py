#!/usr/bin/env mea-pl

from mea_pipeline import cout, cerr, cexit, arg_parser


def init_argparser():
    p = arg_parser(
        "Gather candidate regions for signals generated by tab-annotate-signals"
    )

    p.add_argument("-o", "--outfile", default=None)
    p.add_argument(
        "--vcf", required=True, default=None, help="VCF file for annotating regions"
    )
    p.add_argument(
        "--gff", required=True, default=None, help="GFF file for annotationg genes"
    )
    p.add_argument(
        "--mode",
        choices=["intersection", "union", "major"],
        default="intersection",
        help="mode of joining between signals",
    )
    p.add_argument("--range-span", default=5000, type=int)
    p.add_argument("infiles", nargs="+")

    return p


def gff3_to_df(infile):
    """return a pandas Dataframe for the 8-column GFF3"""

    import pandas as pd
    from urllib.parse import unquote

    regions = {}
    genes = {}

    # see https://m.ensembl.org/info/website/upload/gff3.html
    cols = dict(
        seqid=[],
        source=[],
        type=[],
        start=[],
        end=[],
        score=[],
        strand=[],
        phase=[],
        gene_id=[],
        gene_name=[],
        gene_desc=[],
    )

    with open(infile) as f_in:
        for line in f_in:
            if line.startswith("##sequence-region"):
                tokens = line.split()
                regions[tokens[1]] = int(tokens[3])
                continue

            if line.startswith("#"):
                continue

            columns = line.split("\t")

            if columns[2] != "protein_coding_gene":
                continue

            cols["seqid"].append(columns[0])
            cols["source"].append(columns[1])
            cols["type"].append(columns[2])
            cols["start"].append(int(columns[3]))
            cols["end"].append(int(columns[4]))
            cols["score"].append(columns[5])
            cols["strand"].append(columns[6])
            cols["phase"].append(columns[7])

            tokens = columns[8].split(";")

            gene_id = gene_name = gene_desc = ""
            for token in tokens:
                key, value = token.split("=")

                match key:
                    case "ID":
                        gene_id = value
                    case "Name":
                        gene_name = value
                    case "description":
                        gene_desc = unquote(value)
            cols["gene_id"].append(gene_id)
            cols["gene_name"].append(gene_name)
            cols["gene_desc"].append(gene_desc)

    df = pd.DataFrame(cols)
    # we sort by start position and longer segment
    df.sort_values(
        by=["seqid", "start", "end"], ascending=[True, True, False], inplace=True
    )

    return (regions, df)


def tab_gather_consensus_signals(args):

    import pandas as pd
    import cyvcf2

    from dataclasses import dataclass

    @dataclass
    class SignalRegion:
        CHROM: str
        CHROM_NO: int
        START_POS: int
        END_POS: int
        MOST_SIGNIFICANT_POS: int
        MOST_SIGNIFICANT_VALUE: float
        MOST_SIGNIFICANT_GENE: str
        GENES: list[str]

    dfs = []
    column = "normxpehh"
    for infile in args.infiles:

        if ":" in infile:
            infile, column = infile.split(":", 1)

        if infile.endswith(".feather"):
            df = pd.read_feather(infile)
        else:
            df = pd.read_table(infile)

        if "SIGNAL" not in df.columns:
            cexit(f"ERR: {infile} does not have column named SIGNAL")

        dfs.append(df)

    how = "inner"
    match args.mode:
        case "intersection":
            how = "inner"
            merge_df = dfs[0][dfs[0].SIGNAL == 1][
                ["id", "CHROM", "POS", "CHROM_NO", column]
            ]
        case "union":
            how = "outer"
            merge_df = dfs[0][dfs[0].SIGNAL == 1][["id", "CHROM", "POS", "CHROM_NO"]]
        case "major":
            raise NotImplementedError("mode major is not implemented yet")

    for df in dfs[1:]:
        df = df[df.SIGNAL == 1][["id", "CHROM", "POS", "CHROM_NO"]]
        merge_df = merge_df.merge(df, how=how, on=["id", "CHROM", "POS", "CHROM_NO"])

    merge_df = merge_df.sort_values(by=["CHROM_NO", "POS"])

    segments = []
    segment = None
    for idx, row in merge_df.iterrows():
        if (
            segment is None
            or row.CHROM_NO != segment.CHROM_NO
            or row.POS > segment.END_POS + args.range_span
        ):
            segment = SignalRegion(
                CHROM=row.CHROM,
                CHROM_NO=row.CHROM_NO,
                START_POS=row.POS,
                END_POS=row.POS,
                GENES=[],
                MOST_SIGNIFICANT_POS=row.POS if how == "inner" else -1,
                MOST_SIGNIFICANT_VALUE=row[column] if how == "inner" else 0,
                MOST_SIGNIFICANT_GENE="",
            )
            segments.append(segment)
            continue

        segment.END_POS = row.POS
        if how == "inner":
            if segment.MOST_SIGNIFICANT_VALUE > 0:
                # use maximum
                if segment.MOST_SIGNIFICANT_VALUE < row[column]:
                    segment.MOST_SIGNIFICANT_POS = row.POS
                    segment.MOST_SIGNIFICANT_VALUE = row[column]
            else:
                if segment.MOST_SIGNIFICANT_VALUE > row[column]:
                    segment.MOST_SIGNIFICANT_POS = row.POS
                    segment.MOST_SIGNIFICANT_VALUE = row[column]

    segment_df = pd.DataFrame(segments)
    segment_df["LENGTH"] = segment_df.END_POS - segment_df.START_POS

    if args.vcf:
        vcf = cyvcf2.VCF(args.vcf)

        for idx, row in segment_df.iterrows():

            # get segments
            genes = []
            for v in vcf(f"{row.CHROM}:{row.START_POS}-{row.END_POS}"):

                if not v.INFO.get("ANN", None):
                    segment_df.at[idx, "GENES"] = []
                    continue

                annotations = [e.split("|") for e in v.INFO["ANN"].split(",")]
                for ann in annotations:
                    if ann[1] in [
                        "missense_variant",
                        "frameshift_variant",
                        "conservative_inframe_insertion",
                        "start_lost",
                        "disruptive_inframe_insertion",
                        "frameshift_variant&stop_gained",
                        "5_prime_UTR_variant",
                        "3_prime_UTR_variant",
                        "intron_variant",
                        "5_prime_UTR_premature_start_codon_gain_variant",
                        "synonymous_variant",
                    ]:
                        genes.append(ann[3])
                    elif ann[1] in [
                        "intergenic_region",
                        "upstream_gene_variant",
                        "downstream_gene_variant",
                    ]:
                        pass
                    else:
                        print(f"WARN: unknown type: {ann[1]}")
                genes = sorted(set(genes))
                segment_df.at[idx, "GENES"] = genes

            if how != "inner":
                continue

            # get most significant
            most_significant_gene = []
            for v in vcf(
                f"{row.CHROM}:{row.MOST_SIGNIFICANT_POS - 1}-{row.MOST_SIGNIFICANT_POS}"
            ):

                if not v.INFO.get("ANN", None):
                    continue

                annotations = [e.split("|") for e in v.INFO["ANN"].split(",")]
                for ann in annotations:
                    if ann[1] in [
                        "missense_variant",
                        "frameshift_variant",
                        "conservative_inframe_insertion",
                        "start_lost",
                        "disruptive_inframe_insertion",
                        "frameshift_variant&stop_gained",
                        "5_prime_UTR_variant",
                        "3_prime_UTR_variant",
                        "intron_variant",
                        "5_prime_UTR_premature_start_codon_gain_variant",
                        "synonymous_variant",
                    ]:
                        most_significant_gene.append(f"{ann[3]}={ann[1]}")
                    elif ann[1] in [
                        "intergenic_region",
                        "upstream_gene_variant",
                        "downstream_gene_variant",
                    ]:
                        pass
                    else:
                        print(f"WARN: unknown type: {ann[1]}")
            segment_df.at[idx, "MOST_SIGNIFICANT_GENE"] = "|".join(
                most_significant_gene
            )

    if args.outfile:
        region, gff_df = gff3_to_df(args.gff)
        segment_df["SIGN"] = ""
        for idx, row in segment_df.iterrows():
            genes = []
            if row.MOST_SIGNIFICANT_POS > 0:
                genes.append(
                    f"{row.MOST_SIGNIFICANT_POS}|{row.MOST_SIGNIFICANT_VALUE}|{row.MOST_SIGNIFICANT_GENE}"
                )
            segment_df.at[idx, "SIGN"] = "+" if row.MOST_SIGNIFICANT_VALUE > 0 else "-"

            for gene in row.GENES:
                gene_row = gff_df.loc[gff_df.gene_id == gene].iloc[0]
                desc = gene_row.gene_desc
                name = gene_row.gene_name
                if name:
                    name = f" ({name})"
                genes.append(f"{gene} - {desc}{name}")

            segment_df.at[idx, "GENES"] = "\n".join(genes)

        segment_df[
            ["CHROM", "CHROM_NO", "START_POS", "END_POS", "LENGTH", "SIGN", "GENES"]
        ].to_csv(args.outfile, sep="\t", index=False)
        cerr(f"Output written to {args.outfile}")


def main(args):
    tab_gather_consensus_signals(args)


# EOF
